const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('üìù Assurez-vous que votre fichier .env.local contient :');
  console.log('NEXT_PUBLIC_SUPABASE_URL=votre_url_supabase');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY=votre_cl√©_anon_supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function initDatabase() {
  try {
    console.log('üîç V√©rification de la connexion Supabase...');
    
    // Test de connexion
    const { data, error } = await supabase
      .from('collectes')
      .select('count')
      .limit(1);

    if (error && error.code === '42P01') {
      // Table n'existe pas, on la cr√©e
      console.log('üìã Table "collectes" non trouv√©e, cr√©ation en cours...');
      
      // Cr√©er la table avec SQL
      const { error: createError } = await supabase.rpc('exec_sql', {
        sql: `
          CREATE TABLE IF NOT EXISTS collectes (
            id BIGSERIAL PRIMARY KEY,
            date_collecte TIMESTAMP WITH TIME ZONE NOT NULL,
            type_dechet TEXT NOT NULL CHECK (type_dechet IN ('ordures_m√©nag√®res', 'recyclage', 'verre', 'd√©chets_verts', 'encombrants')),
            zone TEXT NOT NULL,
            statut TEXT NOT NULL DEFAULT 'planifi√©e' CHECK (statut IN ('planifi√©e', 'en_cours', 'termin√©e', 'annul√©e')),
            notes TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
          
          -- Cr√©er les index
          CREATE INDEX IF NOT EXISTS idx_collectes_date_collecte ON collectes(date_collecte);
          CREATE INDEX IF NOT EXISTS idx_collectes_statut ON collectes(statut);
          CREATE INDEX IF NOT EXISTS idx_collectes_zone ON collectes(zone);
          
          -- Fonction pour mettre √† jour automatiquement updated_at
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS $$
          BEGIN
              NEW.updated_at = NOW();
              RETURN NEW;
          END;
          $$ language 'plpgsql';
          
          -- Trigger pour mettre √† jour automatiquement updated_at
          DROP TRIGGER IF EXISTS update_collectes_updated_at ON collectes;
          CREATE TRIGGER update_collectes_updated_at 
              BEFORE UPDATE ON collectes 
              FOR EACH ROW 
              EXECUTE FUNCTION update_updated_at_column();
        `
      });

      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation de la table:', createError);
        console.log('üí° Vous devez ex√©cuter le script SQL manuellement dans l\'√©diteur SQL de Supabase');
        console.log('üìÑ Voir le fichier setup-collectes.sql');
        return;
      }

      console.log('‚úÖ Table "collectes" cr√©√©e avec succ√®s !');
    } else if (error) {
      console.error('‚ùå Erreur de connexion:', error);
      return;
    } else {
      console.log('‚úÖ Table "collectes" existe d√©j√†');
    }

    // Test d'insertion d'une donn√©e d'exemple
    console.log('üß™ Test d\'insertion d\'une collecte d\'exemple...');
    const testCollecte = {
      date_collecte: new Date().toISOString(),
      type_dechet: 'ordures_m√©nag√®res',
      zone: 'Zone Test',
      statut: 'planifi√©e',
      notes: 'Collecte de test'
    };

    const { error: insertError } = await supabase
      .from('collectes')
      .insert([testCollecte]);

    if (insertError) {
      console.error('‚ùå Erreur lors du test d\'insertion:', insertError);
    } else {
      console.log('‚úÖ Test d\'insertion r√©ussi !');
      
      // Supprimer la donn√©e de test
      await supabase
        .from('collectes')
        .delete()
        .eq('zone', 'Zone Test');
    }

    console.log('üéâ Base de donn√©es initialis√©e avec succ√®s !');
    console.log('üöÄ Vous pouvez maintenant utiliser l\'application');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
  }
}

initDatabase(); 